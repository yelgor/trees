  
class Solution:
    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:
        if not root:
            return None

        if key < root.val:
            root.left = self.deleteNode(root.left, key)
        elif key > root.val:
            root.right = self.deleteNode(root.right, key)
        else:
            # Node found
            if not root.left:
                return root.right
            elif not root.right:
                return root.left

            # Node with two children: find in-order successor (min in right subtree)
            min_larger_node = self.get_min(root.right)
            root.val = min_larger_node.val
            root.right = self.deleteNode(root.right, min_larger_node.val)

        return root

    def get_min(self, node: TreeNode) -> TreeNode:
        while node.left:
            node = node.left
        return node
